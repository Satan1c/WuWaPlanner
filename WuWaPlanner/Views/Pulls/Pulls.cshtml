@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using WuWaPlanner.Controllers
@using WuWaPlanner.Extensions
@using WuWaPlanner.Models.CsvManager
@using WuWaPlanner.Models.KuroGamesService
@model WuWaPlanner.Models.View.PullsViewModel
@inject IViewLocalizer                                         Localizer
@{
	ViewData["Title"] = "Pulls";
	var pullsData     = ViewData.Model.Data.Data;
	var pullItemLang  = LangRow.LangParse(Localizer["PullItemLang"].Value);
	var openCloseText = Localizer["BannerButtonOpenClose"].Value.Split('/');
	var tableHeaders  = Localizer["BannerTableHeader"].Value.Split('/');
}

@section Scripts
{
	<script>
	document.querySelectorAll('.toggleTableButton').forEach(button => {
		button.addEventListener('click', function (button) {
			const table = document.getElementById(this.getAttribute('data-target'));

			table.style.display = table.style.display === 'none' ? 'table' : 'none';
			button.target.innerText = table.style.display === 'none' ? this.getAttribute('text-open') : this.getAttribute('text-close');
		});
	});

	document.querySelectorAll('.toggleRarityButton').forEach(button => {
		button.addEventListener('click', function () {
			document.querySelectorAll(this.getAttribute('data-target')).forEach(pull => {
				pull.style.display = pull.style.display === 'none' ? 'table-row' : 'none';
			})
		});
	});
</script>
}

<div class="title">
	<a class="importbtn" asp-area="" asp-controller="Pulls" asp-action="PullsImport">
		<b>Import</b>
	</a>
</div>

<div class="history grid-container container flex flex-wrap">
	@foreach (var bannerType in PullsController.BannerTypes)
	{
		var hasPulls       = pullsData.TryGetValue(bannerType, out var data);
		var bannerTypeName = bannerType.BannerTypeToString();

		<div class="history-item grid-item w-full inline-flex flex-col">

			<p class="bannerType">@Localizer[bannerTypeName]</p>
			<text>Total: @(data.Total.ToString())</text>
			<br/>
			<text>5* @tableHeaders[1]: @data.LegendaryPity.ToString()</text>
			<br/>
			<text>4* @tableHeaders[1]: @data.EpicPity.ToString()</text>
			<br/><br/>

			<text class="toggleTableButton cursor-pointer" data-target="@bannerTypeName" text-open="@openCloseText[0]"
				  text-close="@openCloseText[1]">
				@openCloseText[0]
			</text>
			<br/><br/>
			<div style="display: none;" id="@bannerTypeName" class="w-full">
				<div class="grid-container">
					<div class="grid-item">
						<text class="toggleRarityButton cursor-pointer" data-target=".@(bannerTypeName).rarity.legendary">5</text>
					</div>
					<div class="grid-item">
						<text class="toggleRarityButton cursor-pointer" data-target=".@(bannerTypeName).rarity.epic">4</text>
					</div>
					<div class="grid-item">
						<text class="toggleRarityButton cursor-pointer" data-target=".@(bannerTypeName).rarity.common">3</text>
					</div>
				</div>

				<table class="w-full">
					<thead class="w-full">
					<th style="align-self: center">@tableHeaders[0]</th>
					<th style="align-self: center">@tableHeaders[1]</th>
					<th style="align-self: center">@tableHeaders[2]</th>
					</thead>

					<tbody>
					@if (hasPulls)
					{
						@foreach (var item in data.Pulls)
						{
							var rarityString = item.Rarity.RarityToString();
							var color        = "rarity " + rarityString;

							var name  = item.ItemId;
							var title = item.ItemId;

							if (Model.CsvManager.Categories[item.DropType.DropTypeToString()].Data.TryGetValue(item.DropType == DropTypeEnum.Weapon ? name.WeaponIdToType() : rarityString, out var localized))
							{
								if (localized.TryGetValue(name, out var val))
								{
									name  = val.GetForLocale(pullItemLang);
									title = val.En;
								}
								else
									await Console.Out.WriteLineAsync($"{name} not found for {item.DropType.DropTypeToString()} {name.WeaponIdToType()} {rarityString}");
							}

							<tr style="display: @(item.Rarity > 3 ? "table-row" : "none")" class="@(bannerTypeName) @color">
								<th title="@title">@name</th>
								<th>@item.Pity.ToString()</th>
								<th>
									@($"{item.Time:dd/MM/yyyy}")<br/>@($"{item.Time:HH:mm}")
								</th>
							</tr>
						}
					}
					else
					{
						<tr>
							<th></th>
							<th></th>
							<th></th>
						</tr>
					}
					</tbody>
				</table>
			</div>
		</div>
	}
</div>